/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const { error } = require("console");
const express = require("express");
const fs = require("fs");
// const bodyParser = require("body-parser");

const app = express();
app.use(express.json());
app.get("/todos", (req, res) => {
  fs.readFile("./todos.json", (error, data) => {
    if (error)
      res
        .status(500)
        .send(
          "Error: something wrong happened while reading the todos dB json file"
        );
    let todoItems = JSON.parse(data);
    res.status(200).send(todoItems);
  });
});

app.get("/todos/:id", (req, res) => {
  fs.readFile("./todos.json", (error, data) => {
    let id = req.params.id;
    if (error)
      res
        .status(500)
        .send(
          "Error: something wrong happened while reading the todos dB json file"
        );
    let todoItems = JSON.parse(data);
    if (!(id in todoItems))
      res
        .send(404)
        .send(
          `Requested To-do with id ${id} not in the DB. Give the To-do valid id`
        );
    res.status(200).send(todoItems[id.toString()]);
    todoItems.res.status(200).send(todoItems);
  });
});
app.post("/todos", (req, res) => {
  let todo = req.body;
  let uniqueId = Date.now().toString() + Math.random().toString().slice(-2);
  let todoItems = fs.fileReadSync("./todos.json", "utf-8");
  todoItems = JSON.parse(todoItems);
  while (uniqueId in todoItems) {
    uniqueId = Date.now().toString() + Math.random().toString().slice(-2);
  }
  body["id"] = uniqueId;
  todoItems[uniqueId] = body;
  fs.writeFile("./todos.json", JSON.stringify(todoItems), "utf-8", (error) => {
    if (error)
      res
        .status(500)
        .send(
          "Error: Encoundering an error while storing the todo on json File"
        );
  });
  res
    .status(200)
    .send("The Todo with id" + { id: uniqueId } + "was successfully stored");
});
app.put("/todos/:id", (req, res) => {
  todoItems = fs.readFileSync("./todos.json", "utf-8");
  todoItems = JSON.parse(todoItems);
  id = req.params.id;
  if (!(id in todoItems)) res.status(404).send("ID not found");
  for (i of Object.keys(body)) {
    todoItems[id][i] = body[i];
  }
  fs.writeFileSync(
    "./todos.json",
    JSON.stringify(todoItems),
    "utf-8",
    (error) => {
      if (error)
        res
          .status(500)
          .send(
            "Error : encountered and error while writing the todo onto the todos.json File DB"
          );
    }
  );
  res.status(200).send("Record was updated");
});
app.get("*", () => {
  res.status(404).send("Error : Route Not Found");
}); // app.use(bodyParser.json());
app.listen(3000, () => {
  console.log("Listening on port 3000...");
});
module.exports = app;
